#!/bin/python3
"""Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:

    If the book is returned on or before the expected return date, no fine will be charged (i.e.:

.
If the book is returned after the expected return day but still within the same calendar month and year as the expected return date,
.
If the book is returned after the expected return month but still within the same calendar year as the expected return date, the
.
If the book is returned after the calendar year in which it was expected, there is a fixed fine of

    .

Charges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be

.

Function Description

Complete the libraryFine function in the editor below. It must return an integer representing the fine due.

libraryFine has the following parameter(s):

    d1, m1, y1: returned date day, month and year
    d2, m2, y2: due date day, month and year
"""
import math
import os
import random
import re
import sys


# Complete the libraryFine function below.
def libraryFine(d1, m1, y1, d2, m2, y2):
    hackos = 0
    if y1 > y2:
        hackos = 10000
    elif y1 == y2 and m1 > m2:
        hackos = 500 * (m1 - m2)
    elif y1 == y2 and m1 == m2 and d1 > d2:
        hackos = 15 * (d1 - d2)
    else:
        pass

    return hackos


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    d1M1Y1 = input().split()

    d1 = int(d1M1Y1[0])

    m1 = int(d1M1Y1[1])

    y1 = int(d1M1Y1[2])

    d2M2Y2 = input().split()

    d2 = int(d2M2Y2[0])

    m2 = int(d2M2Y2[1])

    y2 = int(d2M2Y2[2])

    result = libraryFine(d1, m1, y1, d2, m2, y2)

    fptr.write(str(result) + '\n')

    fptr.close()
